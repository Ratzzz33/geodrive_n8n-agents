name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
  SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}

jobs:
  test:
    name: Запуск тестов
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Docker Compose
      run: |
        # Используем встроенный docker compose (v2)
        docker compose version
    
    - name: Make test scripts executable
      run: |
        chmod +x tests/*.sh
    
    - name: Run all tests
      run: |
        bash tests/run-all-tests.sh
    
    - name: Test Docker Compose configuration
      continue-on-error: true
      run: |
        # Проверка только если .env.example доступен (для примера)
        if [ -f "env.example" ]; then
          # Создаем временный .env для проверки
          cp env.example .env.test
          # Заменяем переменные на тестовые значения
          sed -i 's/your-project.neon.tech/test.neon.tech/g' .env.test || true
          sed -i 's/your_password_here/testpass/g' .env.test || true
          # Проверяем конфигурацию
          docker compose --env-file .env.test config --quiet || true
          rm -f .env.test
        else
          docker compose config --quiet || true
        fi

  deploy:
    name: Деплой на сервер
    needs: test
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') &&
      secrets.SERVER_IP != '' &&
      (secrets.SERVER_SSH_KEY != '' || secrets.SERVER_PASSWORD != '')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH with key
      if: secrets.SERVER_SSH_KEY != ''
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts || true
    
    - name: Setup SSH with password (fallback)
      if: secrets.SERVER_SSH_KEY == '' && secrets.SERVER_PASSWORD != ''
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts || true
    
    - name: Deploy to server
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SERVER_USER: ${{ secrets.SERVER_USER || 'root' }}
        REPO_URL: https://github.com/${{ github.repository }}.git
      continue-on-error: false
      timeout-minutes: 10
      run: |
        if [ -n "${{ secrets.SERVER_SSH_KEY }}" ]; then
          # Использование SSH ключа
          ssh -i ~/.ssh/id_rsa ${SERVER_USER}@${SERVER_IP} bash << EOF
            set -e
            echo "=========================================="
            echo "Обновление проекта на сервере"
            echo "=========================================="
            
            if [ ! -d "/root/geodrive_n8n-agents" ]; then
              cd /root
              git clone ${REPO_URL} geodrive_n8n-agents
              cd geodrive_n8n-agents
            else
              cd /root/geodrive_n8n-agents
              git fetch origin
              git reset --hard origin/master || git reset --hard origin/main || true
            fi
            
            echo ""
            echo "Обновление .env (если нужно)..."
            if [ ! -f .env ]; then
              cp env.example .env
              echo "⚠️  ВНИМАНИЕ: Необходимо настроить .env файл!"
            fi
            
            echo ""
            echo "Настройка MCP сервера..."
            if [ -f setup/04-setup-mcp-server.sh ]; then
              chmod +x setup/04-setup-mcp-server.sh
              bash setup/04-setup-mcp-server.sh || true
            fi
            
            echo ""
            echo "Перезапуск контейнеров..."
            docker compose down 2>/dev/null || true
            docker compose pull || true
            docker compose up -d
            
            echo ""
            echo "Ожидание запуска (15 секунд)..."
            sleep 15
            
            echo ""
            echo "Статус контейнеров:"
            docker compose ps
            
            echo ""
            echo "=========================================="
            echo "✅ Деплой завершен!"
            echo "=========================================="
          EOF
        else
          # Использование пароля через sshpass
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} bash << EOF
            set -e
            echo "=========================================="
            echo "Обновление проекта на сервере"
            echo "=========================================="
            
            if [ ! -d "/root/geodrive_n8n-agents" ]; then
              cd /root
              git clone ${REPO_URL} geodrive_n8n-agents
              cd geodrive_n8n-agents
            else
              cd /root/geodrive_n8n-agents
              git fetch origin
              git reset --hard origin/master || git reset --hard origin/main || true
            fi
            
            echo ""
            echo "Настройка MCP сервера..."
            if [ -f setup/04-setup-mcp-server.sh ]; then
              chmod +x setup/04-setup-mcp-server.sh
              bash setup/04-setup-mcp-server.sh || true
            fi
            
            echo ""
            echo "Перезапуск контейнеров..."
            docker compose down 2>/dev/null || true
            docker compose up -d
            
            echo ""
            echo "Ожидание запуска (15 секунд)..."
            sleep 15
            
            echo ""
            echo "Статус контейнеров:"
            docker compose ps
            
            echo ""
            echo "=========================================="
            echo "✅ Деплой завершен!"
            echo "=========================================="
          EOF
        fi
    
    - name: Verify deployment
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SERVER_USER: ${{ secrets.SERVER_USER || 'root' }}
      run: |
        sleep 10
        if [ -n "${{ secrets.SERVER_SSH_KEY }}" ]; then
          ssh -i ~/.ssh/id_rsa ${SERVER_USER}@${SERVER_IP} "docker compose ps && docker compose logs --tail=20 n8n mcp-server"
        else
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} "docker compose ps && docker compose logs --tail=20 n8n mcp-server"
        fi

