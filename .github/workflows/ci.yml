name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      deploy:
        description: '–î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω'
        required: false
        default: 'false'

jobs:
  test:
    name: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Make test scripts executable
        run: |
          chmod +x tests/*.sh || true
      - name: Run all tests
        run: |
          bash tests/run-all-tests.sh

  changes:
    name: detect-changes
    runs-on: ubuntu-latest
    outputs:
      deploy: ${{ steps.filter.outputs.deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check changed files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            deploy:
              - 'docker-compose.yml'
              - 'mcp-server/**'
              - 'setup/**'
              - '.github/workflows/ci.yml'

  deploy:
    name: deploy
    needs: [test, changes]
    if: >
      github.ref == 'refs/heads/master' &&
      (needs.changes.outputs.deploy == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true'))
    runs-on: ubuntu-latest
    environment: production
    concurrency:
      group: deploy-production
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH with password auth
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts || true

      - name: Deploy to Hetzner server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER || 'root' }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          REPO_URL: https://github.com/${{ github.repository }}.git
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} bash << 'EOF'
            set -e
            echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π..."
            
            if [ ! -d "/root/geodrive_n8n-agents" ]; then
              echo "üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
              cd /root && git clone ${REPO_URL} geodrive_n8n-agents
            fi
            
            cd /root/geodrive_n8n-agents
            echo "üì¶ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥..."
            git fetch origin
            git reset --hard origin/master || git reset --hard origin/main || true
            
            echo "üê≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Docker Compose..."
            docker compose down 2>/dev/null || true
            docker compose pull || true
            docker compose up -d
            
            echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
            sleep 15
            
            echo "‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
            docker compose ps
            
            echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
          EOF

      - name: Verify deployment
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å n8n..."
          sleep 5
          curl -f http://${SERVER_IP}:5678 || echo "‚ö†Ô∏è n8n –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MCP..."
          curl -f http://${SERVER_IP}:1880 || echo "‚ö†Ô∏è MCP –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."

